<?xml version="1.0" encoding="UTF-8"?>
<root>
	<entry name="sssPhilHealthReport">
	<![CDATA[
SELECT 
	CONCAT(d.lastName, ', ', d.firstName) AS employeeFullName, 
	d.nickname AS employeeNickname,
	IFNULL(sssEmployeeContribution, 0) AS sssEmployeeContribution, 
	IFNULL(sssEmployerContribution, 0) AS sssEmployerContribution,
	c.monthlyPay,
	IFNULL(pagibigContribution, 0) AS pagibigContribution,
	d.sssNumber,
	d.philHealthNumber
FROM (
	SELECT a.id AS employeeId, MAX(-d.amount) as sssEmployeeContribution, MAX(e.employerContribution) AS sssEmployerContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'SSS'
	LEFT JOIN sssContributionTableEntry e
	  on e.employeeContribution = -d.amount
	WHERE a.resigned = false
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) AS pagibigContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PAGIBIG'
	WHERE a.resigned = false
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) b
	ON b.employeeId = a.employeeId
JOIN (
	SELECT id AS employeeId, SUM(rate) AS monthlyPay
	FROM (
		SELECT
			a.id,
			(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) * (CASE b.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN employeeAttendance b
			ON b.employee_id = a.id
		WHERE a.resigned = false
		AND MONTH(b.date) = :month
		AND YEAR(b.date) = :year
		AND a.payType = 'PER_DAY'
		AND (a.paySchedule = 'WEEKLY' OR (a.paySchedule = 'SEMIMONTHLY' and :firstDayOfMonth > '2017-07-31'))
	) perDayMonthlyPay
	GROUP BY id
	UNION ALL
	SELECT id, SUM(semimonthlyPay) AS monthlyPay
	FROM (
		SELECT id, SUM(rate) AS semimonthlyPay
		FROM (
			SELECT
				a.id,
				(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / :numberOfWorkingDaysInFirstHalf AS rate
			FROM employee a
			JOIN employeeAttendance b
				ON b.employee_id = a.id
			WHERE a.resigned = false
			AND (a.payType = 'FIXED_RATE' OR (a.payType = 'PER_DAY' AND :firstDayOfMonth < '2017-07-31'))
			AND a.paySchedule = 'SEMIMONTHLY'
			AND b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 14 DAY)
		) semiMonthlyMonthlyPay1
		GROUP BY id
		UNION ALL
		SELECT id, SUM(rate) AS semimonthlyPay
		FROM (
			SELECT
				a.id,
				(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / :numberOfWorkingDaysInSecondHalf AS rate
			FROM employee a
			JOIN employeeAttendance b
				ON b.employee_id = a.id
			WHERE a.resigned = false
			AND (a.payType = 'FIXED_RATE' OR (a.payType = 'PER_DAY' AND :firstDayOfMonth < '2017-07-31'))
			AND a.paySchedule = 'SEMIMONTHLY'
			AND b.date >= DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY)
			AND b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		) semiMonthlyMonthlyPay2
		GROUP BY id
	) semiMonthlyMonthlyPay
	GROUP BY id
	UNION ALL
	SELECT id, SUM(rate) as monthlyPay
	FROM (
		SELECT
			a.id,
			(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / 6 AS rate
		FROM employee a
		JOIN employeeAttendance b
			ON b.employee_id = a.id
		WHERE a.resigned = false
		AND a.payType = 'FIXED_RATE'
		AND a.paySchedule = 'WEEKLY'
		AND b.date >= :firstDayOfMonth
		AND b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	) weeklyMonthlyPay
	GROUP BY id
	UNION ALL
	SELECT a.id, c.rate
	FROM employee a
	JOIN salary c
		ON c.employee_id = a.id
	WHERE a.resigned = false
	AND a.payType = 'FIXED_RATE'
	AND a.paySchedule = 'MONTHLY'
	AND c.effectiveDateFrom <= :firstDayOfMonth
	AND (c.effectiveDateTo IS NULL OR c.effectiveDateTo >= DATE_ADD(DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH), INTERVAL -1 DAY))
) c
	ON c.employeeId = a.employeeId
JOIN employee d
	ON d.id = a.employeeId
ORDER BY d.firstName, d.lastName
	]]>
	</entry>
	<entry name="latesReport">
		SELECT emp.nickname AS employeeNickname, subquery.lates
		FROM employee emp
		JOIN (
			SELECT b.employee_id, -SUM(a.amount) AS lates
			FROM payslipAdjustment a
			JOIN payslip b
			  ON b.id = a.payslip_id
			JOIN payroll c
			  ON c.id = b.payroll_id
			WHERE a.type = 'LATES'
			AND c.payDate BETWEEN :dateFrom AND :dateTo
			GROUP BY b.employee_id
		) subquery
			ON subquery.employee_id = emp.id
		ORDER BY lates DESC
	</entry>
	<entry name="monthlyPay">
<![CDATA[
SELECT monthlyPay
FROM (
	SELECT SUM(rate) AS monthlyPay
	FROM (
		SELECT
			(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) * (CASE b.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN employeeAttendance b
			ON b.employee_id = a.id
		WHERE a.id = :employeeId
		AND MONTH(b.date) = :month
		AND YEAR(b.date) = :year
		AND a.payType = 'PER_DAY'
	) perDayMonthlyPay
	UNION ALL
	SELECT SUM(semimonthlyPay) AS monthlyPay
	FROM (
		SELECT SUM(rate) AS semimonthlyPay
		FROM (
			SELECT
				(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / :numberOfWorkingDaysInFirstHalf AS rate
			FROM employee a
			JOIN employeeAttendance b
				ON b.employee_id = a.id
			WHERE a.id = :employeeId
			AND a.payType = 'FIXED_RATE'
			AND a.paySchedule = 'SEMIMONTHLY'
			AND b.date BETWEEN :firstDayOfMonth and DATE_ADD(:firstDayOfMonth, INTERVAL 14 DAY)
		) semiMonthlyMonthlyPay1
		UNION ALL
		SELECT SUM(rate) AS semimonthlyPay
		FROM (
			SELECT
				(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / :numberOfWorkingDaysInSecondHalf AS rate
			FROM employee a
			JOIN employeeAttendance b
				ON b.employee_id = a.id
			WHERE a.id = :employeeId
			AND a.payType = 'FIXED_RATE'
			AND a.paySchedule = 'SEMIMONTHLY'
			AND b.date >= DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY)
			AND b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		) semiMonthlyMonthlyPay2
	) semiMonthlyMonthlyPay
	UNION ALL
	SELECT SUM(rate) as monthlyPay
	FROM (
		SELECT
			(SELECT rate FROM salary WHERE employee_id = a.id AND effectiveDateFrom <= b.date AND (effectiveDateTo IS NULL OR effectiveDateTo >= b.date)) / 6 AS rate
		FROM employee a
		JOIN employeeAttendance b
			ON b.employee_id = a.id
		WHERE a.id = :employeeId
		AND a.payType = 'FIXED_RATE'
		AND a.paySchedule = 'WEEKLY'
		AND b.date >= :firstDayOfMonth
		AND b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	) weeklyMonthlyPay
	UNION ALL
	SELECT c.rate
	FROM employee a
	JOIN salary c
		ON c.employee_id = a.id
	WHERE a.id = :employeeId
	AND a.payType = 'FIXED_RATE'
	AND a.paySchedule = 'MONTHLY'
	AND c.effectiveDateFrom <= :firstDayOfMonth
	AND (c.effectiveDateTo IS NULL OR c.effectiveDateTo >= DATE_ADD(DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH), INTERVAL -1 DAY))
) monthlyPay
WHERE monthlyPay IS NOT NULL
	]]>
	</entry>
	<entry name="monthlyPay2">
<![CDATA[
SELECT IFNULL(SUM(
	(CASE payType 
		WHEN 'PER_DAY' THEN rate
		WHEN 'FIXED_RATE' THEN
			(CASE paySchedule
				WHEN 'WEEKLY' THEN rate / 6
				WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
			END)
	END)
), 0) AS monthlyPay
FROM (
	SELECT b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
	FROM employee a
	JOIN calendar b
		ON b.date >= :firstDayOfMonth and b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
	JOIN salary c
		ON b.date >= c.effectiveDateFrom
		AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
		AND c.employee_id = a.id
	JOIN employeeAttendance d
		ON d.employee_id = a.id
		AND d.date = b.date
	WHERE a.id = :employeeId
) z
	]]>
	</entry>
	<entry name="philHealthReport">
	<![CDATA[
SELECT 
    d.id as employeeId,
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.philHealthNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.due, 0) AS due
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as due
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PHILHEALTH'
	WHERE (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
LEFT JOIN (
	SELECT id AS employeeId, IFNULL(SUM(
		(CASE payType 
			WHEN 'PER_DAY' THEN rate
			WHEN 'FIXED_RATE' THEN
				(CASE paySchedule
					WHEN 'WEEKLY' THEN rate / 6
					WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
				END)
		END)
	), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date >= :firstDayOfMonth
			and b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
	GROUP BY id
) c
	ON c.employeeId = d.id
WHERE (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
	<entry name="sssReport">
	<![CDATA[
SELECT
    d.id as employeeId,
    d.firstName as employeeFirstName,
    d.lastName as employeeLastName,
    d.tin as employeeTin,
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.sssNumber,
	IFNULL(c.monthlyPay, 0) AS monthlyPay,
	IFNULL(a.employeeContribution, 0) AS employeeContribution,
	IFNULL(a.employerContribution, 0) AS employerContribution,
	IFNULL(a.employeeCompensation, 0) AS employeeCompensation,
    IFNULL(a.employeeProvidentFundContribution, 0) AS employeeProvidentFundContribution,
    IFNULL(a.employerProvidentFundContribution, 0) AS employerProvidentFundContribution    
FROM employee d
JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as employeeContribution, MAX(e.employerContribution) AS employerContribution,
		MAX(e.employeeCompensation) as employeeCompensation,
		MAX(e.employeeProvidentFundContribution) as employeeProvidentFundContribution,
        MAX(e.employerProvidentFundContribution) as employerProvidentFundContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'SSS'
	JOIN sssContributionTableEntry e
	  on e.employeeContribution = -d.amount
	WHERE (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id	
JOIN (
	SELECT id AS employeeId, IFNULL(SUM(
		(CASE payType 
			WHEN 'PER_DAY' THEN rate
			WHEN 'FIXED_RATE' THEN
				(CASE paySchedule
					WHEN 'WEEKLY' THEN rate / 6
					WHEN 'SEMIMONTHLY' THEN rate / (CASE WHEN date < DATE_ADD(:firstDayOfMonth, INTERVAL 15 DAY) THEN :numberOfWorkingDaysInFirstHalf ELSE :numberOfWorkingDaysInSecondHalf END)
				END)
		END)
	), 0) AS monthlyPay
	FROM (
		SELECT a.id, b.date, c.payType, c.paySchedule, c.rate * (CASE d.attendance WHEN 'WHOLE_DAY' THEN 1 WHEN 'HALF_DAY' THEN 0.5 ELSE 0 END) AS rate
		FROM employee a
		JOIN calendar b
			ON b.date >= :firstDayOfMonth
			and b.date < DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH)
		JOIN salary c
			ON b.date >= c.effectiveDateFrom
			AND (b.date <= c.effectiveDateTo OR c.effectiveDateTo IS NULL)
			AND c.employee_id = a.id
		JOIN employeeAttendance d
			ON d.employee_id = a.id
			AND d.date = b.date
		WHERE (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	) z
	GROUP BY id
) c
	ON c.employeeId = d.id
WHERE (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
	<entry name="pagIbigReport">
	<![CDATA[
SELECT 
    d.id as employeeId,
	CONCAT(d.lastName, ', ', d.firstName) AS employeeName,
	d.pagIbigNumber,
	IFNULL(a.employeeContribution, 0) AS employeeContribution,
	IFNULL(a.employerContribution, 0) AS employerContribution
FROM employee d
LEFT JOIN (
	SELECT a.id AS employeeId, MAX(-d.amount) as employeeContribution,
	    (case when STR_TO_DATE(CONCAT('01', d.contributionMonth), '%d%m%Y') >= '2024-02-01' then 200 else 100 end) as employerContribution
	FROM employee a
	JOIN payslip b
	  ON b.employee_id = a.id
	JOIN payroll c
	  ON c.id = b.payroll_id
	LEFT JOIN payslipAdjustment d
	  ON d.payslip_id = b.id
	  AND d.type = 'PAGIBIG'
	WHERE (a.resignDate is null OR a.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
	AND d.contributionMonth = :contributionMonth
	GROUP BY a.ID
) a
	ON a.employeeId = d.id
WHERE (d.resignDate is null OR d.resignDate >= DATE_ADD(:firstDayOfMonth, INTERVAL 1 MONTH))
ORDER BY d.lastName, d.firstName
	]]>
	</entry>
</root>